when green flag clicked
generate_otp :: custom
get_plaintext :: custom
encrypt :: custom
say (ciphertext)
transmit :: custom

define transmit
set [position v] to [1]
repeat (length of (ciphertext)) 
  set [character v] to (letter (position) of (ciphertext))
  broadcast [get_index v] and wait
  send_morse :: custom
  change [position v] by (1)
end
broadcast [complete v]

define send_morse
set [code v] to (item (index) of [morse v] :: list)
set [index v] to [1]
repeat (length of (code)) 
  set [dotdash v] to (letter (index) of (code))
  if <(dotdash) = [.]> then 
    play note (72 v) for (0.1) beats
  else 
    play note (72 v) for (0.3) beats
  end
  rest for (0.1) beats
  change [index v] by (1)
end
rest for (0.3) beats

define generate_otp
delete (all v) of [otp v]
repeat (10) 
  add (pick random (0) to (25)) to [otp v]
end

define get_plaintext
ask [What is your message?] and wait
set [plaintext v] to (answer)

when I receive [get_index v]
set [index v] to [1]
repeat until <(item (index) of [alphabet v] :: list) = (character)> 
  change [index v] by (1)
end

define encrypt
set [ciphertext v] to []
set [position v] to [1]
repeat (length of (plaintext)) 
  if <[alphabet v] contains (character) ?> then 
    set [character v] to (letter (position) of (plaintext))
    broadcast [get_index v] and wait
    get_encrypted :: custom
    set [ciphertext v] to (join (ciphertext) (item (encrypyted) of [alphabet v] :: list))
    change [position v] by (1)
  else 
    say [plaintext contains character not in the alphabet!] for (2) secs
    stop [all v]
  end
end

define get_encrypted
set [encrypyted v] to ((index) + (item (position) of [otp v] :: list))
if <(encrypyted) > [26]> then 
  set [encrypyted v] to ((encrypyted) - (26))
end